<?xml version="1.0" encoding="UTF-8" ?>
<types>
    <encode-error error_class="ParseError"/>
    <decode-error error_class="ParseError"/>
    <union>
        <!--Unions are to be used anywhere multiple types are valid but only one should be used.-->
        <!--They are included in the RPC spec to ensure that all types are checked on compile time
        and so we avoid using language specific features like overloading or universal types. -->
        <type-union typeName="blockSpecifierUnion">
            <comment>Specifies a block</comment>
            <union-element type="byte-array" name="hash"/>
            <union-element type="long" name="blockNumber"/>
            <union-element type="blockEnum" name="blockEnum"/>
        </type-union>
    </union>
    <composite>
        <!--Composite types are used to define struct like data structures-->
        <type-composite typeName="request">
            <comment>This is the standard request body for a JSON RPC Request</comment>
            <field fieldName="id" required="false" type="int"/>
            <field fieldName="method" required="true" type="string"/>
            <field fieldName="params" required="true" type="any"/>
            <field fieldName="jsonrpc" required="false" type="version_string"/>
        </type-composite>
        <type-composite typeName="response">
            <comment>This is the standard response body for a JSON RPC Request</comment>
            <field fieldName="id" required="false" type="int"/>
            <field fieldName="result" required="false" type="any"/>
            <field fieldName="error" required="false" type="error"/>
            <field fieldName="jsonrpc" required="true" type="version_string"/>
        </type-composite>
        <type-composite typeName="error">
            <comment>Contains the error messages for failed JSON RPC Requests</comment>
            <field fieldName="code" required="true" type="int"/>
            <field fieldName="message" required="true" type="string" />
        </type-composite>
        <type-composite typeName="txLogDetails">
            <field fieldName="address" required="true" type="address"/>
            <field fieldName="transactionIndex" required="true" type="int"/>
            <field fieldName="data" required="true" type="data_hex_string"/>
            <field fieldName="topics" required="true" type="data_hex_string_array"/>
            <field fieldName="blockNumber" required="true" type="long"/>
        </type-composite>
        <type-composite typeName="txDetails">
            <field fieldName="contractAddress" required="false" type="address"/>
            <field fieldName="hash" required="true" type="byte_32_string"/>
            <field fieldName="transactionIndex" required="true" type="int"/>
            <field fieldName="value" required="true" type="big_int_hex_string"/>
            <field fieldName="nrg" required="true" type="long_hex_string"/>
            <field fieldName="nrgPrice" required="true" type="long_hex_string"/>
            <field fieldName="gas" required="true" type="long_hex_string"/>
            <field fieldName="gasPrice" required="true" type="long_hex_string"/>
            <field fieldName="nonce" required="true" type="data_hex_string"/>
            <field fieldName="from" required="true" type="address"/>
            <field fieldName="to" required="false" type="address"/>
            <field fieldName="timestamp" required="true" type="long"/>
            <field fieldName="input" required="true" type="data_hex_string"/>
            <field fieldName="blockNumber" required="true" type="long_hex_string"/>
            <field fieldName="blockHash" required="true" type="byte_32_string"/>
            <field fieldName="error" required="true" type="string"/>
            <field fieldName="type" required="true" type="byte_hex_string"/>
            <field fieldName="nrgUsed" required="true" type="long_hex_string"/>
            <field fieldName="gasUsed" required="true" type="long_hex_string"/>
            <field fieldName="hasInternalTransactions" required="true" type="bool"/>
            <field fieldName="logs" required="true" type="txLogDetails_array"/>
        </type-composite>
        <type-composite typeName="blockDetails">
            <field fieldName="number" required="true" type="long"/>
            <field fieldName="hash" required="true" type="data_hex_string"/>
            <field fieldName="parentHash" required="true" type="data_hex_string"/>
            <field fieldName="logsBloom" required="true" type="byte-array"/>
            <field fieldName="transactionsRoot" required="true" type="data_hex_string"/>
            <field fieldName="statesRoot" required="true" type="data_hex_string"/>
            <field fieldName="receiptsRoot" required="true" type="data_hex_string"/>
            <field fieldName="difficulty" required="true" type="big_int_hex_string"/>
            <field fieldName="totalDifficulty" required="true" type="big_int_hex_string"/>
            <field fieldName="miner" required="true" type="address" />
            <field fieldName="timestamp" required="true" type="long_hex_string"/>
            <field fieldName="gasUsed" required="true" type="long_hex_string"/>
            <field fieldName="gasLimit" required="true" type="long_hex_string"/>
            <field fieldName="nrgUsed" required="true" type="long_hex_string"/>
            <field fieldName="nrgLimit" required="true" type="long_hex_string"/>
            <field fieldName="sealType" required="true" type="byte_hex_string"/>
            <field fieldName="mainChain" required="true" type="bool"/>
            <field fieldName="extraData" required="true" type="data_hex_string"/>
            <field fieldName="size" required="true" type="int"/>
            <field fieldName="numTransactions" required="true" type="int"/>
            <field fieldName="txTrieRoot" required="true" type="data_hex_string"/>
            <field fieldName="blockReward" required="true" type="big_int_hex_string"/>
            <field fieldName="transactions" required="true" type="txDetails_array"/>
            <field fieldName="nonce" required="false" type="data_hex_string"/>
            <field fieldName="solution" required="false" type="data_hex_string"/>
            <field fieldName="seed" required="false" type="data_hex_string"/>
            <field fieldName="signature" required="false" type="data_hex_string"/>
            <field fieldName="publicKey" required="false" type="data_hex_string"/>
            <field fieldName="blockTime" required="false" type="int"/>
        </type-composite>
    </composite>
    <array>
        <!--Array types are self explanatory. They can nest a composite type, constrained type, primitive type or param type.-->
        <!--TODO explicitly prevent nesting of arrays-->
        <type-list typeName="request_array" nestedType="request"/>
        <type-list typeName="response_array" nestedType="response"/>
        <type-list typeName="data_hex_string_array" nestedType="data_hex_string"/>
        <type-list typeName="txLogDetails_array" nestedType="txLogDetails"/>
        <type-list typeName="txDetails_array" nestedType="txDetails"/>
    </array>
    <constrained>
        <!--Constrained types define a maximum and minimum size, and a regex to be used for validating the type-->
        <!--They all rely on a base type-->
        <type-constrained baseType="byte-array" max="infinity"
            min="4" regex="^0x([0-9a-fA-F][0-9a-fA-F])+" typeName="data_hex_string"/>
        <type-constrained baseType="bigint" max="infinity" min="3" regex="^0x[0-9a-fA-F]+"
            typeName="big_int_hex_string"/>
        <type-constrained baseType="long" min="3" max="19" regex="^0x[0-9a-fA-F]+"
            typeName="long_hex_string"/>
        <type-constrained baseType="int" min="3" max="11" regex="^0x[0-9a-fA-F]+"
            typeName="int_hex_string"/>
        <type-constrained baseType="byte" min="3" max="4" regex="^0x[0-9a-fA-F]+"
            typeName="byte_hex_string"/>
        <type-constrained baseType="data_hex_string" typeName="byte_32_string" max="66" min="66" regex=".*"/>
    </constrained>
    <enum>
        <!--Enum types are used in the case of a string or value with a restricted set of values-->
        <type-enum typeName="version_string" internalType = "string">
            <value name="Version2" var="2.0"/>
        </type-enum>
        <type-enum typeName="blockEnum" internalType="string">
            <value name="LATEST" var="latest"/>
        </type-enum>
    </enum>
    <param>
        <!-- param types specific to each method-->
        <type-params-wrapper typeName="ecRecoverParams">
            <field fieldName="dataThatWasSigned" index="0" required="true" type="data_hex_string"/>
            <field fieldName="signature" index="1" required="true" type="data_hex_string"/>
        </type-params-wrapper>
        <type-params-wrapper typeName="blockSpecifier">
            <field fieldName="block" index="0" required="true" type="blockSpecifierUnion"/>
        </type-params-wrapper>
        <!-- return type specific to each method-->
    </param>
    <primitives>
        <!--Base types-->
        <type-primitive typeName="any"/><!--TODO remove-->
        <type-primitive typeName="bool"/>
        <type-primitive typeName="string"/>
        <type-primitive typeName="long"/>
        <type-primitive typeName="int"/>
        <type-primitive typeName="byte"/>
        <type-primitive typeName="bigint"/>
        <type-primitive typeName="byte-array"/>
        <type-primitive typeName="address"/>
    </primitives>
</types>